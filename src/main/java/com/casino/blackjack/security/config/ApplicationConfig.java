package com.casino.blackjack.security.config;


import com.casino.blackjack.security.auditing.ApplicationAuditAware;
import com.casino.blackjack.Repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.domain.AuditorAware;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
//Felhaszn√°l√≥ keres√©se az adatb√°zisb√≥l (UserDetailsService).
//Hiteles√≠t√©s be√°ll√≠t√°sa (authenticationProvider()).
//Automatikus napl√≥z√°s t√°mogat√°sa (auditorAware()).
//Hiteles√≠t√©si menedzser konfigur√°l√°sa (authenticationManager()).
//Jelsz√≥ titkos√≠t√°s be√°ll√≠t√°sa (passwordEncoder()).
//üîπ Mi√©rt fontos ez?
//
//Ez az oszt√°ly k√∂zponti szerepet j√°tszik a felhaszn√°l√≥k hiteles√≠t√©s√©ben √©s az auditor√°l√°sban.
//Minden egyes bejelentkez√©skor √©s m≈±veletn√©l ezek a be√°ll√≠t√°sok biztos√≠tj√°k, hogy az adatok v√©dettek √©s napl√≥zottak legyenek.

@Configuration
@RequiredArgsConstructor
public class ApplicationConfig {

  private final UserRepository repository;

  @Bean
  public UserDetailsService userDetailsService() {
    return username -> repository.findByEmail(username)
        .orElseThrow(() -> new UsernameNotFoundException("User not found"));
  }
//L√©trehoz egy DaoAuthenticationProvider objektumot.
//Be√°ll√≠tja a UserDetailsService-t, hogy a rendszer tudja, honnan kell lek√©rdezni a felhaszn√°l√≥kat.
//Megadja a jelsz√≥ titkos√≠t√≥t (passwordEncoder()).
  @Bean
  public AuthenticationProvider authenticationProvider() {
    DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
    authProvider.setUserDetailsService(userDetailsService());
    authProvider.setPasswordEncoder(passwordEncoder());
    return authProvider;
  }

  @Bean
  public AuditorAware<Integer> auditorAware() {
    return new ApplicationAuditAware();
  }

  @Bean
  public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
    return config.getAuthenticationManager();
  }

  @Bean
  public PasswordEncoder passwordEncoder() {
    return new BCryptPasswordEncoder();
  }

}
