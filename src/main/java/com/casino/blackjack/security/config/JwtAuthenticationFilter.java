package com.casino.blackjack.security.config;


import com.casino.blackjack.Repository.TokenRepository;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;

import lombok.RequiredArgsConstructor;
import org.springframework.lang.NonNull;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;
//Bej√∂v≈ë k√©r√©sek eset√©n ellen≈ërzi a JWT tokent.
//Ha √©rv√©nyes, bejelentkezteti a felhaszn√°l√≥t a Spring Security rendszerbe.
//Ha nincs token vagy √©rv√©nytelen, egyszer≈±en tov√°bbengedi a k√©r√©st (nem dob hib√°t, de a v√©dett v√©gpontok el√©r√©s√©hez sz√ºks√©g lesz bejelentkez√©sre).
//Nem ellen≈ërzi az /api/v1/auth v√©gpontokat, √≠gy a bejelentkez√©s √©s regisztr√°ci√≥ m≈±k√∂dhet token n√©lk√ºl.
//Ez a sz≈±r≈ë biztos√≠tja, hogy a felhaszn√°l√≥k az √©rv√©nyes JWT tokenjeikkel hozz√°f√©rjenek a v√©dett v√©gpontokhoz az alkalmaz√°sodban.
@Component
@RequiredArgsConstructor

public class JwtAuthenticationFilter extends OncePerRequestFilter {

  private final JwtService jwtService;
  private final UserDetailsService userDetailsService;
  private final TokenRepository tokenRepository;


  @Override
  protected void doFilterInternal(
          @NonNull HttpServletRequest request,
          @NonNull HttpServletResponse response,
          @NonNull FilterChain filterChain
  ) throws ServletException, IOException {
    if (request.getServletPath().contains("/api/v1/auth")) {
      filterChain.doFilter(request, response);
      return;
    }

    // Extract JWT from cookies instead of Authorization header
    final String jwt = jwtService.extractTokenFromCookies(request);

    if (jwt == null) {
      filterChain.doFilter(request, response);
      return;
    }

    final String userEmail = jwtService.extractUsername(jwt);

    if (userEmail != null && SecurityContextHolder.getContext().getAuthentication() == null) {
      UserDetails userDetails = this.userDetailsService.loadUserByUsername(userEmail);
      var isTokenValid = tokenRepository.findByToken(jwt)
              .map(t -> !t.isExpired() && !t.isRevoked())
              .orElse(false);
//ezt nem ertem mert a jwtbol szedi ki a usernevet es a userDetailsbol is, √©s azt nem ertem ,hogy a userdetails a jwtb≈ël tolti be a usernevet akkor minek osszehasonlitani a kettot
      if (jwtService.isTokenValid(jwt, userDetails) && isTokenValid) {
        UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(
                userDetails,
                null,
                userDetails.getAuthorities()
        );
        authToken.setDetails(
                //L√©trehoz egy WebAuthenticationDetails objektumot, amely tartalmazza a felhaszn√°l√≥ b√∂ng√©sz≈ëj√©b≈ël sz√°rmaz√≥ adatokat.
                //P√©ld√°ul:
                //IP-c√≠m (request.getRemoteAddr())
                //Session ID (request.getRequestedSessionId())
                new WebAuthenticationDetailsSource().buildDetails(request)
        );
        //ek√©ri a Spring Security aktu√°lis hiteles√≠t√©si k√∂rnyezet√©t (SecurityContext).
        //setAuthentication(authToken)
        //Be√°ll√≠tja a felhaszn√°l√≥ hiteles√≠t√©si adatait, vagyis azt mondja a rendszernek:
        //‚úÖ ‚ÄûEz a felhaszn√°l√≥ be van jelentkezve‚Äù
        //üõ† Mi√©rt fontos ez?
        //Mostant√≥l a felhaszn√°l√≥ hivatalosan hiteles√≠tett a rendszerben.
        //A v√©dett v√©gpontok (@PreAuthorize, @Secured) most m√°r enged√©lyezhetik a k√©r√©seit.
        //A rendszer nem k√©ri √∫jra a bejelentkez√©st minden egyes k√©r√©sn√©l.
        SecurityContextHolder.getContext().setAuthentication(authToken);
      }
    }
    filterChain.doFilter(request, response);
  }


}


